name: CI with conan

on: [pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - windows-2022
          - ubuntu-22.04
          - macos-12
        compiler:
          # - llvm
          - gcc
        CMAKE_GENERATOR:
          - "Ninja Multi-Config"
        include:
          - os: windows-2022
            compiler: msvc
            CMAKE_GENERATOR: "Visual Studio 17 2022"

        # exclude:
        #   - os: windows-2022
        #     compiler: llvm

    steps:
      - uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.conan/
            ~/.cache/ccache
            ~/.cache/pip
            ~/Library/Caches/ccache
            C:\Users\runneradmin\cmake
            C:\Users\runneradmin\AppData\Local\ccache
          key: conan-${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('./conanfile.py')}}
          restore-keys: |
            conan-${{ runner.os }}-${{ matrix.compiler }}-

      - name: configure Pagefile
        if: runner.os == 'Windows'
        uses: al-cheb/configure-pagefile-action@v1.2
        with:
            minimum-size: 16GB
            maximum-size: 16GB
            disk-root: "C:"

      - name: Setup Cpp
        uses: aminya/setup-cpp@v0.26.2
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          ninja: true
          conan: true
          vcpkg: false
          ccache: false
          clangtidy: false
          task: false

          cppcheck: false

          gcovr: false
          opencppcoverage: false

      # - name: Information about ccache
      #   run: |
      #     ccache -s -v
      - name: Configure CMake
        run: |
          cmake . -B ./build -G "${{matrix.CMAKE_GENERATOR}}" -DCMAKE_BUILD_TYPE=Release -DENABLE_CONAN_OPTION=ON -DBUILD_TESTS=ON -DBUILD_DEMOS=ON
      - name: Build
        run: |
          cmake --build ./build --config Release
      - name: Install hdf5 with brew
        if: runner.os == 'Macos'
        env:
          ARCHFLAGS: "-arch x86_64"
        run: |
          brew install hdf5@1.10
          export HDF5_DIR=/usr/local/opt/hdf5@1.10
          pip3 install pytest h5py
      - name: Install Python dependencies
        if: runner.os != 'Macos'
        run: |
          pip3 install pytest h5py
      - name: Unix test
        if: runner.os != 'Windows'
        run: |
          ./build/test/Release/test_samurai_lib
          cd test; pytest --h5diff
      - name: Windows test
        if: runner.os == 'Windows'
        run: |
          .\build\test\Release\test_samurai_lib
          # cd test; pytest -s --h5diff
