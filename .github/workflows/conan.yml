name: CI with conan

on: [pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          # - windows-2022
          # - ubuntu-22.04
          - macos-11
        compiler:
          - llvm
          # - gcc
        CMAKE_GENERATOR:
          - "Ninja Multi-Config"
        # include:
        #   - os: windows-2022
        #     compiler: msvc
        #     CMAKE_GENERATOR: "Visual Studio 17 2022"

        # exclude:
        #   - os: windows-2022
        #     compiler: llvm

    steps:
      - uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/vcpkg
            ~/.conan
            ~/.cache/ccache
            ~/.cache/pip
            ~/Library/Caches/ccache
            ./build/vcpkg_installed
            ${{ env.CONAN_USER_HOME }}
            ${{ env.HOME }}/.cache
            ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
            ${{ env.LOCALAPPDATA }}\vcpkg\archives
            ${{ env.APPDATA }}\vcpkg\archives
            ${{ env.APPDATA }}\Roaming\ccache
          key: conan-${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('./vcpkg.json')}}-${{ matrix.CMAKE_GENERATOR }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            conan-${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('./vcpkg.json') }}-
      - name: Install Python dependencies
        env:
          SYSTEM_VERSION_COMPAT: 0
        run: |
          brew install hdf5
          brew doctor
          brew config
          export HDF5_DIR=/usr/local/Cellar/hdf5/1.12.2_2
          pip3 install --no-binary=h5py h5py
          pip3 install pytest
      - name: Setup Cpp
        uses: aminya/setup-cpp@v0.22.0
        # uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          ninja: true
          conan: true
          vcpkg: false
          ccache: false
          clangtidy: false
          task: false

          cppcheck: false

          gcovr: false
          opencppcoverage: false

      # - name: Information about ccache
      #   run: |
      #     ccache -s -v
      - name: Create profile
        run: |
          conan profile new default --detect
      - name: List conan profile
        run: |
          conan profile list
      # - name: Update conan profile for gcc
      #   if: |
      #     runner.os == 'Macos' &&
      #     runner.compiler == 'gcc'
      #   run: |
      #     conan profile update settings.compiler.libcxx=libstdc++11 default
      #     export DYLD_LIBRARY_PATH=~/.bin
      - name: Update conan profile for clang
        if: |
          runner.os == 'Macos' &&
          matrix.compiler == 'llvm'
        run: |
          conan profile update settings.compiler.libcxx=libc++ default
      - name: Install dependencies
        run: |
          conan install . --build missing
      - name: Configure CMake
        run: |
          cmake . -B ./build -G "${{matrix.CMAKE_GENERATOR}}" -DCMAKE_BUILD_TYPE=Release -DENABLE_CONAN_OPTION=ON -DBUILD_TESTS=ON -DBUILD_DEMOS=ON -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      - name: Build
        run: |
          cmake --build ./build --config Release
      - name: Unix test
        if: runner.os != 'Windows'
        run: |
          ./build/test/Release/test_samurai_lib
          cd test; pytest --h5diff
      - name: Windows test
        if: runner.os == 'Windows'
        run: |
          .\build\test\Release\test_samurai_lib
          cd test; pytest -s --h5diff
